{"ast":null,"code":"var _jsxFileName = \"/home/roliveirajr/workspace/inGaia/src/components/description/Description.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport { DescriptionContain, ImageLogo, FormSearch, ContainerList } from './Style';\nimport Cards from './../cards/Cards';\nimport imageTop from \"../../img/image-top.svg\";\nimport listQuery from '../../services/query/querys';\nimport { graphql, Query } from 'react-apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Description = function (props) {\n  _s();\n\n  const client = useApolloClient();\n  const [name, setName] = useState('');\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(listQuery, {\n    variables: {\n      name\n    }\n  });\n  let content;\n  let sName;\n\n  if (data.user !== undefined && data.user !== null) {\n    if (loading) {\n      content = 'Loading User...';\n    }\n\n    if (error) {\n      content = `Error Occur: ${error}`;\n    }\n\n    const user = data.user;\n    content = `Username: ${user.name}    ID: ${user.id}`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DescriptionContain, {\n      children: [/*#__PURE__*/_jsxDEV(ImageLogo, {\n        src: imageTop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(FormSearch, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"search\",\n          placeholder: \"Search characters\",\n          onChange: event => {\n            sName = event.target.value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: event => {\n            setName(sName);\n          },\n          value: name,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ContainerList, {\n      children: /*#__PURE__*/_jsxDEV(Cards, {\n        name: \"teste\",\n        image: \"teste\",\n        species: \"teste\"\n      }, 'teste', false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Description, \"Yp0MGQag8swO0N4g7HpNAb5mAzE=\", true, function () {\n  return [useQuery];\n});\n\n_c = Description;\nexport default graphql(listQuery, {\n  name: 'list'\n})(Description);\n\nvar _c;\n\n$RefreshReg$(_c, \"Description\");","map":{"version":3,"sources":["/home/roliveirajr/workspace/inGaia/src/components/description/Description.js"],"names":["React","useState","Fragment","DescriptionContain","ImageLogo","FormSearch","ContainerList","Cards","listQuery","graphql","Query","useQuery","Description","props","client","useApolloClient","name","setName","data","error","loading","variables","content","sName","user","undefined","id","imageTop","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,kBAAT,EAA6BC,SAA7B,EAAwCC,UAAxC,EAAoDC,aAApD,QAAwE,SAAxE;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,cAA/B;AACA,SAAQC,QAAR,QAAuB,qBAAvB;;;AAEA,MAAMC,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAAA;;AACjC,QAAMC,MAAM,GAAGC,eAAe,EAA9B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BT,QAAQ,CAACH,SAAD,EAAY;AACjDa,IAAAA,SAAS,EAAE;AAAEL,MAAAA;AAAF;AADsC,GAAZ,CAAzC;AAIA,MAAIM,OAAJ;AACA,MAAIC,KAAJ;;AAEA,MAAIL,IAAI,CAACM,IAAL,KAAcC,SAAd,IAA2BP,IAAI,CAACM,IAAL,KAAc,IAA7C,EAAmD;AAC/C,QAAIJ,OAAJ,EAAa;AAAEE,MAAAA,OAAO,GAAG,iBAAV;AAA6B;;AAE5C,QAAIH,KAAJ,EAAW;AAAEG,MAAAA,OAAO,GAAI,gBAAeH,KAAM,EAAhC;AAAmC;;AAEhD,UAAMK,IAAI,GAAGN,IAAI,CAACM,IAAlB;AACAF,IAAAA,OAAO,GAAI,aAAaE,IAAI,CAACR,IAAM,WAAWQ,IAAI,CAACE,EAAI,EAAvD;AACH;;AAED,sBACI,QAAC,QAAD;AAAA,4BACA,QAAC,kBAAD;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,GAAG,EAAEC;AAAhB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAA,gCACI;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,WAAW,EAAC,mBAFhB;AAGI,UAAA,QAAQ,EAAGC,KAAD,IAAW;AACjBL,YAAAA,KAAK,GAAGK,KAAK,CAACC,MAAN,CAAaC,KAArB;AACH;AALL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI;AACI,UAAA,IAAI,EAAC,QADT;AAEI,UAAA,OAAO,EAAGF,KAAD,IAAW;AAChBX,YAAAA,OAAO,CAACM,KAAD,CAAP;AACH,WAJL;AAIO,UAAA,KAAK,EAAEP,IAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAiBI;AAAA,kBAAIM;AAAJ;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAqBA,QAAC,aAAD;AAAA,6BACG,QAAC,KAAD;AACK,QAAA,IAAI,EAAC,OADV;AAEK,QAAA,KAAK,EAAC,OAFX;AAGK,QAAA,OAAO,EAAC;AAHb,SAIS,OAJT;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,YArBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH,CArDD;;GAAMV,W;UAG+BD,Q;;;KAH/BC,W;AAuDN,eAAeH,OAAO,CAACD,SAAD,EAAY;AAC9BQ,EAAAA,IAAI,EAAE;AADwB,CAAZ,CAAP,CAEZJ,WAFY,CAAf","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport { DescriptionContain, ImageLogo, FormSearch, ContainerList} from './Style'\nimport Cards from './../cards/Cards'\nimport imageTop from '../../img/image-top.svg'\nimport listQuery from '../../services/query/querys'\nimport { graphql, Query } from 'react-apollo'\nimport {useQuery} from '@apollo/react-hooks';\n\nconst Description = function (props) {\n    const client = useApolloClient();\n    const [name, setName] = useState('');\n    const { data, error, loading } = useQuery(listQuery, {\n        variables: { name }\n    });\n\n    let content;\n    let sName;\n\n    if (data.user !== undefined && data.user !== null) {\n        if (loading) { content = 'Loading User...' }\n\n        if (error) { content = `Error Occur: ${error}` }\n\n        const user = data.user;\n        content = `Username: ${ user.name }    ID: ${ user.id }`\n    }\n\n    return (\n        <Fragment>\n        <DescriptionContain>\n            <ImageLogo src={imageTop} />\n            <FormSearch>\n                <input \n                    name=\"search\" \n                    placeholder=\"Search characters\"\n                    onChange={(event) => {\n                        sName = event.target.value;\n                    }}\n                />\n                <button \n                    type=\"submit\"\n                    onClick={(event) => {\n                        setName(sName);\n                    }} value={name}\n                >Search</button>\n            </FormSearch>\n            <p>{content}</p>\n        </DescriptionContain>\n\n        <ContainerList>\n           <Cards \n                name='teste'\n                image='teste'\n                species='teste'\n                key='teste'\n            />\n        </ContainerList>\n        \n\n    </Fragment>\n    )\n}\n\nexport default graphql(listQuery, {\n    name: 'list'\n})(Description);"]},"metadata":{},"sourceType":"module"}