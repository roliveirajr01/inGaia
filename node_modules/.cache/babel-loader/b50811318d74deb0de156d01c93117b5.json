{"ast":null,"code":"var _jsxFileName = \"/home/roliveirajr/workspace/inGaia/src/components/description/Description.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport { DescriptionContain, ImageLogo, FormSearch, ContainerList } from './Style';\nimport Cards from './../cards/Cards';\nimport imageTop from \"../../img/image-top.svg\";\nimport listQuery from '../../services/query/querys';\nimport { graphql, Query } from 'react-apollo';\nimport { ApolloProvider, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Description = function (props) {\n  _s();\n\n  const [name, setName] = useState('');\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(listQuery, {\n    variables: {\n      name\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ApolloProvider, {\n      children: /*#__PURE__*/_jsxDEV(DescriptionContain, {\n        children: [/*#__PURE__*/_jsxDEV(ImageLogo, {\n          src: imageTop\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormSearch, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"search\",\n            placeholder: \"Search characters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: async event => {\n              setName(event.target.value);\n            },\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContainerList, {\n      children: /*#__PURE__*/_jsxDEV(Cards, {\n        name: \"teste\",\n        image: \"teste\",\n        species: \"teste\"\n      }, 'teste', false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Description, \"Zf+WOxn9d8LinXF7yfmSVf5Xgfo=\", false, function () {\n  return [useQuery];\n});\n\n_c = Description;\nexport default graphql(listQuery, {\n  name: 'list'\n})(Description);\n\nvar _c;\n\n$RefreshReg$(_c, \"Description\");","map":{"version":3,"sources":["/home/roliveirajr/workspace/inGaia/src/components/description/Description.js"],"names":["React","useState","Fragment","DescriptionContain","ImageLogo","FormSearch","ContainerList","Cards","listQuery","graphql","Query","ApolloProvider","useQuery","Description","props","name","setName","data","loading","error","variables","imageTop","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,kBAAT,EAA6BC,SAA7B,EAAwCC,UAAxC,EAAoDC,aAApD,QAAyE,SAAzE;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,OAAT,EAAkBC,KAAlB,QAA+B,cAA/B;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,gBAAzC;;;AAEA,MAAMC,WAAW,GAAG,UAAUC,KAAV,EAAiB;AAAA;;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BP,QAAQ,CAACJ,SAAD,EAAY;AACjDY,IAAAA,SAAS,EAAE;AAAEL,MAAAA;AAAF;AADsC,GAAZ,CAAzC;AAKA,sBACI,QAAC,QAAD;AAAA,4BACI,QAAC,cAAD;AAAA,6BACI,QAAC,kBAAD;AAAA,gCACI,QAAC,SAAD;AAAW,UAAA,GAAG,EAAEM;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,UAAD;AAAA,kCACI;AACI,YAAA,IAAI,EAAC,QADT;AAEI,YAAA,WAAW,EAAC;AAFhB;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI;AACI,YAAA,IAAI,EAAC,QADT;AAEI,YAAA,OAAO,EAAE,MAAOC,KAAP,IAAiB;AACtBN,cAAAA,OAAO,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAP;AACH,aAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAoBI,QAAC,aAAD;AAAA,6BACI,QAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,KAAK,EAAC,OAFV;AAGI,QAAA,OAAO,EAAC;AAHZ,SAIQ,OAJR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,CAxCD;;GAAMX,W;UAE+BD,Q;;;KAF/BC,W;AA0CN,eAAeJ,OAAO,CAACD,SAAD,EAAY;AAC9BO,EAAAA,IAAI,EAAE;AADwB,CAAZ,CAAP,CAEZF,WAFY,CAAf","sourcesContent":["import React, { useState, Fragment } from 'react'\nimport { DescriptionContain, ImageLogo, FormSearch, ContainerList } from './Style'\nimport Cards from './../cards/Cards'\nimport imageTop from '../../img/image-top.svg'\nimport listQuery from '../../services/query/querys'\nimport { graphql, Query } from 'react-apollo'\nimport { ApolloProvider, useQuery } from '@apollo/client';\n\nconst Description = function (props) {\n    const [name, setName] = useState('')\n    const { data, loading, error } = useQuery(listQuery, {\n        variables: { name },\n    });\n\n\n    return (\n        <Fragment>\n            <ApolloProvider>\n                <DescriptionContain>\n                    <ImageLogo src={imageTop} />\n                    <FormSearch>\n                        <input\n                            name=\"search\"\n                            placeholder=\"Search characters\"\n                        />\n                        <button\n                            type=\"submit\"\n                            onClick={async (event) => {\n                                setName(event.target.value)\n                            }}\n                        >Search</button>\n\n                    </FormSearch>\n                </DescriptionContain>\n            </ApolloProvider>\n\n            <ContainerList>\n                <Cards\n                    name='teste'\n                    image='teste'\n                    species='teste'\n                    key='teste'\n                />\n            </ContainerList>\n\n\n        </Fragment>\n    )\n}\n\nexport default graphql(listQuery, {\n    name: 'list'\n})(Description);"]},"metadata":{},"sourceType":"module"}