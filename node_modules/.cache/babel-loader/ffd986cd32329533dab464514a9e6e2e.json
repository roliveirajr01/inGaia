{"ast":null,"code":"var _jsxFileName = \"/home/roliveirajr/workspace/inGaia/src/components/description/Description.js\";\nimport React, { Component, Fragment } from 'react';\nimport { DescriptionContain, ImageLogo, FormSearch } from './Style';\nimport imageTop from \"../../img/image-top.svg\";\nimport { graphql } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Description extends Component {\n  render() {\n    var _list$characters, _list$characters$resu;\n\n    const {\n      list\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contain\",\n        children: !list.loading ? (_list$characters = list.characters) === null || _list$characters === void 0 ? void 0 : (_list$characters$resu = _list$characters.results) === null || _list$characters$resu === void 0 ? void 0 : _list$characters$resu.map(function (items, index) {\n          console.log(items.name) && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"$\", items.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 25\n          }, this);\n        }) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst listQuery = gql`\n    query {\n        characters(page: 2, filter: { name: \"rick\" }) {\n            results {\n                name\n                image\n                species\n            }\n        }\n    }\n`;\nexport default graphql(listQuery, {\n  name: 'list'\n})(Description);","map":{"version":3,"sources":["/home/roliveirajr/workspace/inGaia/src/components/description/Description.js"],"names":["React","Component","Fragment","DescriptionContain","ImageLogo","FormSearch","graphql","gql","Description","render","list","props","loading","characters","results","map","items","index","console","log","name","listQuery"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,kBAAT,EAA6BC,SAA7B,EAAwCC,UAAxC,QAA0D,SAA1D;;AAGA,SAASC,OAAT,QAAwB,cAAxB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;;AAGA,MAAMC,WAAN,SAA0BP,SAA1B,CAAoC;AAChCQ,EAAAA,MAAM,GAAG;AAAA;;AACL,UAAM;AAACC,MAAAA;AAAD,QAAS,KAAKC,KAApB;AACA,wBAEI,QAAC,QAAD;AAAA,6BAEI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,kBAEI,CAACD,IAAI,CAACE,OAAN,uBACAF,IAAI,CAACG,UADL,8EACA,iBAAiBC,OADjB,0DACA,sBAA0BC,GAA1B,CAA8B,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AACjDC,UAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,IAAlB,kBACA;AAAA,4BAAKJ,KAAK,CAACI,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA;AAEH,SAHD,CADA,GAIK;AANT;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAiBH;;AApB+B;;AAwBpC,MAAMC,SAAS,GAAGd,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,eAAeD,OAAO,CAACe,SAAD,EAAY;AAC9BD,EAAAA,IAAI,EAAE;AADwB,CAAZ,CAAP,CAEZZ,WAFY,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { DescriptionContain, ImageLogo, FormSearch } from './Style'\nimport imageTop from '../../img/image-top.svg'\n\nimport { graphql } from 'react-apollo'\nimport gql from 'graphql-tag';\n\n\nclass Description extends Component {\n    render() {\n        const {list} = this.props;\n        return (\n\n            <Fragment>\n\n                <div className=\"contain\">\n                 {\n                    !list.loading ? \n                    list.characters?.results?.map(function(items, index) {\n                        console.log(items.name) &&\n                        <p>${items.name}</p>                     \n                    }) : ''\n                }\n                </div>\n                \n\n            </Fragment>\n        )\n    }\n}\n\n\nconst listQuery = gql`\n    query {\n        characters(page: 2, filter: { name: \"rick\" }) {\n            results {\n                name\n                image\n                species\n            }\n        }\n    }\n`\n\nexport default graphql(listQuery, {\n    name: 'list'\n})(Description);"]},"metadata":{},"sourceType":"module"}